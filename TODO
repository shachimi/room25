room25
* class Rule to handle specific game config such as:
** Board init
** win/lose condition
** turn handling (cpt, rotation of player)
** action available

* resolve effect of room:
** freezeroom -> Scheduling should have only one action
** vortexroom -> avatar send on center room
** wormroom -> avatar should go to another visible wormroom
** visionroom -> select a room and apply see on it (change Board::see to be able to take a Cell directly)
** gearroom -> select a cell (except center) and apply a valid slide on it (change Board::slide to be able to take a Cell directly)
** illusionroom -> give a list of coordinate to player that should return the index in the vector of the one he want to see, then if valid switch roomeffect and activate the one of the room taken
** warproom -> give a list of coordinate to player that should return the index in the vector of the one he want to see, then if valid  switch the room inside the two cell

* Scheduling/Game handle mono action (first or second sequence) (DONE)
* Guardian programmation (no scheduling for guardian?)
* add static Sheduling::validate(scheduling, Avatar) (DONE without avatar)

* In Game::execPush only append valid target (not myself and not Robot) /* maybe in Rule? */
* truly handle turn (dead people does not play anymore)

********************
**** Networking ****
********************
SERVER --
GameServer
* Init game
*? has a socket to listen on ?
** get acknowledge of all the players
**** wait for player request
**** wait for end of player init message for ALL players
     (if two distant on the same client,
     it doesnt matter since it will send the message two times)
** init Board (locally)
** inform all clients about the game rules
** inform all clients about the Board
** inform all clients that game is ready

* Run game
** your classical game running function
** inform all players about an action they're not aware of

DistantClient
* Create class
** has a socket to accept clients on [OK]
** add listening process [OK]
** implement all selection functions [OK]
** implement inform function ?
SERVER --

-- CLIENT
GameClient
* Init game
** init local players (prompt client)
** inform server about the players
**** for EACH player, send a message
** wait for game rules information (from network directly)
** wait for board information (from network directly)
** wait for server game ready (from network directly)
** ask each player for their actions
** inform others players

* Run game
** your classical game running function


AwayClient
* add all messages reception correct action to perform (not simply print)
CLIENT --

+
Message shceduling